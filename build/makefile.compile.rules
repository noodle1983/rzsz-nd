##############################################################################
# Licensing Information                                                      #
#    This is a release of rzsz-nd, brought to you by Dong Lu(noodle1983@126  #
#    .com). Except for extra permissions from Dong Lu(noodle1983@126.com),   #
#    this software is released under version 3 of the GNU General            #
#    Public License (GPLv3).                                                 #
##############################################################################

#########################################
#          OUT DIR                      #
#########################################
DIR_LIST=$(subst /, \ , $(CURDIR))
MOD_NAME=$(word $(words $(DIR_LIST)), $(DIR_LIST))

DEBUG_SHARED_TARGET=$(if $(COMPILE_SHARED),lib$(MOD_NAME)$(DEBUG_SUFFIX).so)
DEBUG_STATIC_TARGET=lib$(MOD_NAME)$(DEBUG_SUFFIX).a
DEBUG_TARGET = $(DEBUG_SHARED_TARGET) $(DEBUG_STATIC_TARGET)

RELEASE_SHARED_TARGET=$(if $(COMPILE_SHARED),lib$(MOD_NAME)$(RELEASE_SUFFIX).so)
RELEASE_STATIC_TARGET=lib$(MOD_NAME)$(RELEASE_SUFFIX).a
RELEASE_TARGET = $(RELEASE_SHARED_TARGET) $(RELEASE_STATIC_TARGET)

OUTDIR_PREFIX=$(PROJBASE)/.lib
OUTDIR=$(OUTDIR_PREFIX)/$(MOD_NAME)

#########################################
#               OBJECTS                 #
#########################################
CFILES=$(foreach DIR, $(SUBDIR), $(wildcard $(DIR)/*.c))
CPPFILES=$(foreach DIR, $(SUBDIR), $(wildcard $(DIR)/*.cpp))
TMPOBJECTS=$(patsubst %.cpp, %.o, $(CPPFILES)) \
           $(patsubst %.c, %.o, $(CFILES)) 
OUTSUBDIR=$(addprefix $(OUTDIR)/, $(SUBDIR))
    
TMP_PATH_OBJECTS=$(addprefix $(OUTDIR)/, $(TMPOBJECTS))
DEBUG_OBJECTS=$(patsubst %.o, %$(DEBUG_SUFFIX).o, $(TMP_PATH_OBJECTS))
RELEASE_OBJECTS=$(patsubst %.o, %$(RELEASE_SUFFIX).o, $(TMP_PATH_OBJECTS))

#########################################
#         Exe    Target                 #
#########################################
EXEDIR=exe
EXE_OUTDIR=$(OUTDIR_PREFIX)/$(EXEDIR)
EXEOUTSUBDIR=$(addprefix $(OUTDIR)/, $(EXEDIR))
EXECPPFILES=$(foreach DIR, $(EXEDIR), $(wildcard $(DIR)/*.cpp))

DEBUG_TMPEXEOBJECTS=$(patsubst %.cpp, %$(DEBUG_SUFFIX).o, $(EXECPPFILES))
DEBUG_EXEOBJECTS=$(addprefix $(OUTDIR)/, $(DEBUG_TMPEXEOBJECTS))
DEBUG_EXETARGET=$(basename $(notdir $(DEBUG_EXEOBJECTS)))
DEBUG_TARGET+=$(DEBUG_EXETARGET)

RELEASE_TMPEXEOBJECTS=$(patsubst %.cpp, %$(RELEASE_SUFFIX).o, $(EXECPPFILES))
RELEASE_EXEOBJECTS=$(addprefix $(OUTDIR)/, $(RELEASE_TMPEXEOBJECTS))
RELEASE_EXETARGET=$(basename $(notdir $(RELEASE_EXEOBJECTS)))
RELEASE_TARGET+=$(RELEASE_EXETARGET)
#########################################
#               Dependance              #
#########################################
DEBUG_DEPENDFILES=$(patsubst %.o, %.d, $(DEBUG_OBJECTS))
DEBUG_DEPENDTARGET=$(patsubst %.d, %.d.tmp, $(DEBUG_DEPENDFILES))
DEBUG_EXEDEPENDFILES=$(patsubst %.o, %.d, $(DEBUG_EXEOBJECTS))
DEBUG_EXEDEPENDTARGET=$(patsubst %.d, %.d.tmp, $(DEBUG_EXEDEPENDFILES))

RELEASE_DEPENDFILES=$(patsubst %.o, %.d, $(RELEASE_OBJECTS))
RELEASE_DEPENDTARGET=$(patsubst %.d, %.d.tmp, $(RELEASE_DEPENDFILES))
RELEASE_EXEDEPENDFILES=$(patsubst %.o, %.d, $(RELEASE_EXEOBJECTS))
RELEASE_EXEDEPENDTARGET=$(patsubst %.d, %.d.tmp, $(RELEASE_EXEDEPENDFILES))

#########################################
#           Makefile Dependance         #
#########################################
DEPENDMAKEFILES=$(wildcard build/makefile.*)

#########################################
#             FUNCTION                  #
#########################################
# $(1): static_target
# $(2): objects
define build_static_lib
    @if [ "$(2)" != "" ]; then \
        echo "$(AR) $(ARFLAGS) $(OUTDIR_PREFIX)/$(1) $(2)"; \
        $(AR) $(ARFLAGS) $(OUTDIR_PREFIX)/$(1) $(2); \
        echo " $(2) " > $(OUTDIR_PREFIX)/$(MOD_NAME)$(SUFFIX).objectlist; \
        echo ""; \
    fi
endef

# $(1): shared_target
# $(2): objects
define build_shared_lib
    @if [ "$(2)" != "" ]; then \
        echo "$(CC) $(SHAREDFLAG) -o $(OUTDIR_PREFIX)/$(1) $(2)"; \
        $(CC) $(SHAREDFLAG) -o $(OUTDIR_PREFIX)/$(1) $(2); \
        echo " $(2) " > $(OUTDIR_PREFIX)/$(MOD_NAME)$(SUFFIX).objectlist; \
        echo ""; \
	fi;
endef

# $(1): target
# $(2): source file
# $(3): target file basename
# $(4): compile flags
# $(5): suffix
define build_dependency
	@echo "building dependancy for $(2)..."
	@set -e; rm -f $(1) $(OUTDIR)/$(3)$(5).d; \
	($(CC) $(4) -MM -c $(2) > $(1) || rm -f $(1)) &&  \
	sed 's,\(.*\)\.o[ :]*,$(OUTDIR)/$*$(5).o $(1): ,g' <$(1) >$(OUTDIR)/$(3)$(5).d; 
endef

#########################################
#               Rules                   #
#########################################
all:SUFFIX=$(RELEASE_SUFFIX)
all:CFLAGS+=$(RELEASE_CFLAGS)
all:LDFLAGS+=$(RELEASE_LDFLAGS)
all:$(RELEASE_TARGET)
debug:SUFFIX=$(DEBUG_SUFFIX)
debug:CFLAGS+=$(DEBUG_CFLAGS)
debug:LDFLAGS+=$(DEBUG_LDFLAGS)
debug:$(DEBUG_TARGET)

$(DEBUG_STATIC_TARGET):debug_depend $(DEBUG_OBJECTS)
	$(call build_static_lib,$@,$(DEBUG_OBJECTS)) # no blank between ,

$(RELEASE_STATIC_TARGET):release_depend $(RELEASE_OBJECTS)
	$(call build_static_lib,$@,$(RELEASE_OBJECTS)) # no blank between ,

$(DEBUG_SHARED_TARGET):debug_depend $(DEBUG_OBJECTS)
	$(call build_shared_lib,$@,$(DEBUG_OBJECTS)) # no blank between ,

$(RELEASE_SHARED_TARGET):release_depend $(RELEASE_OBJECTS)
	$(call build_shared_lib,$@,$(RELEASE_OBJECTS)) # no blank between ,

$(DEBUG_EXETARGET):$(DEBUG_STATIC_TARGET) debug_exedepend $(DEBUG_EXEOBJECTS)
	$(CC) $(CXXFLAGS) $(OUTDIR)/$(EXEDIR)/$@.o $(DEBUG_OBJECTS) $(LDFLAGS) -o $(EXE_OUTDIR)/$@
	ln -sf $(EXE_OUTDIR)/$@ $(subst $(DEBUG_SUFFIX),,$@)
	@echo ""

$(RELEASE_EXETARGET):$(RELEASE_STATIC_TARGET) release_exedepend $(RELEASE_EXEOBJECTS)
	$(CC) $(CXXFLAGS) $(OUTDIR)/$(EXEDIR)/$@.o $(RELEASE_OBJECTS) $(LDFLAGS) -o $(EXE_OUTDIR)/$@
	strip $(EXE_OUTDIR)/$@
	ln -sf $(EXE_OUTDIR)/$@ $(subst $(RELEASE_SUFFIX),,$@)
	@echo ""

$(OUTDIR):$(OUTDIR_PREFIX)
	@if [ ! -d $@ ]; then mkdir -p $@; fi;

$(OUTDIR_PREFIX):
	@if [ ! -d $@ ]; then mkdir -p $@; fi;

$(EXE_OUTDIR):
	@if [ ! -d $@ ]; then mkdir -p $@; fi;

$(EXEOUTSUBDIR):
	@if [ ! -d $@ ]; then mkdir -p $@; fi;

$(OUTSUBDIR):
	@if [ ! -d $@ ]; then mkdir -p $@; fi;

-include $(DEBUG_DEPENDFILES)
-include $(DEBUG_EXEDEPENDFILES)
$(OUTDIR)/%$(DEBUG_SUFFIX).d.tmp:%.cpp
	$(call build_dependency,$@,$<,$*,$(CXXFLAGS),$(DEBUG_SUFFIX)) # no blank between ,

$(OUTDIR)/%$(DEBUG_SUFFIX).d.tmp:%.c
	$(call build_dependency,$@,$<,$*,$(CFLAGS),$(DEBUG_SUFFIX)) # no blank between ,

$(OUTDIR)/%$(DEBUG_SUFFIX).o:%.cpp $(DEPENDMAKEFILES)
	$(CC) $(CXXFLAGS) -c $< -o $@
	@echo ""

$(OUTDIR)/%$(DEBUG_SUFFIX).o:%.c $(DEPENDMAKEFILES)
	$(cc) $(CFLAGS) -c $< -o $@
	@echo ""

-include $(RELEASE_DEPENDFILES)
-include $(RELEASE_EXEDEPENDFILES)
$(OUTDIR)/%$(RELEASE_SUFFIX).d.tmp:%.cpp
	$(call build_dependency,$@,$<,$*,$(CXXFLAGS),$(RELEASE_SUFFIX)) # no blank between ,

$(OUTDIR)/%$(RELEASE_SUFFIX).d.tmp:%.c
	$(call build_dependency,$@,$<,$*,$(CFLAGS),$(RELEASE_SUFFIX)) # no blank between ,

$(OUTDIR)/%$(RELEASE_SUFFIX).o:%.cpp $(DEPENDMAKEFILES)
	$(CC) $(CXXFLAGS) -c $< -o $@
	@echo ""

$(OUTDIR)/%$(RELEASE_SUFFIX).o:%.c $(DEPENDMAKEFILES)
	$(cc) $(CFLAGS) -c $< -o $@
	@echo ""

debug_depend: $(OUTDIR) $(OUTSUBDIR) $(DEPENDMAKEFILES) $(DEBUG_DEPENDTARGET)
debug_exedepend: $(OUTDIR) $(EXEOUTSUBDIR) $(EXE_OUTDIR) $(DEPENDMAKEFILES) $(DEBUG_EXEDEPENDTARGET)
release_depend: $(OUTDIR) $(OUTSUBDIR) $(DEPENDMAKEFILES) $(RELEASE_DEPENDTARGET)
release_exedepend: $(OUTDIR) $(EXEOUTSUBDIR) $(EXE_OUTDIR) $(DEPENDMAKEFILES) $(RELEASE_EXEDEPENDTARGET)

FORCE:

.PHONY:clean debug_depend debug_exedepend release_depend release_exedepend
clean:
	@rm -rf $(OUTDIR_PREFIX)

install: $(RELEASE_EXETARGET)
	@install -d $(PREFIX)
	@for EXE_FILE in $(RELEASE_EXETARGET) ;  \
	do					 \
		echo "install -s $(EXE_OUTDIR)/$$EXE_FILE $(PREFIX)/bin/$$EXE_FILE"; \
		install $(EXE_OUTDIR)/$$EXE_FILE $(PREFIX)/bin/$$EXE_FILE; \
	done;

uninstall:
	@for EXE_FILE in $(RELEASE_EXETARGET) ;  \
	do					 \
		echo "rm -f $(PREFIX)/bin/$$EXE_FILE"; \
		rm -f $(PREFIX)/bin/$$EXE_FILE; \
	done;
